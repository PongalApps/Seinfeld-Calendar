package com.pongal.seinfeld.task;

import java.util.Calendar;
import java.util.Set;

import android.app.Activity;
import android.app.Dialog;
import android.content.ContentValues;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;

import com.pongal.seinfeld.CalendarActivity;
import com.pongal.seinfeld.R;
import com.pongal.seinfeld.SplashScreenActivity;
import com.pongal.seinfeld.data.Task;
import com.pongal.seinfeld.db.DBManager;

public class TaskActivity extends Activity {

    DBManager manager;
    TaskListView taskView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);
	taskView = new TaskListView(getApplicationContext(), "Click the menu button to add tasks...");
	taskView.addQuestionClickListener(getQuestionIconListener());
	setContentView(taskView);
	initDBManager();
	refreshTaskList();
	
	/*SharedPreferences sharedPrefs = getSharedPreferences(WidgetConfiguration.PREFS_NAME, 0);
	Editor prefsEditor = sharedPrefs.edit();
	prefsEditor.clear();
	prefsEditor.commit();*/
    }

    @Override
    protected void onResume() {
	super.onResume();
	refreshTaskList();
    }

    private void refreshTaskList() {
	Set<Task> tasks = manager.getTasks();
	taskView.addTasks(tasks, R.layout.task, getTaskClickHandler());
    }

    private OnClickListener getTaskClickHandler() {
	return new OnClickListener() {
	    @Override
	    public void onClick(View view) {
		Task task = (Task) view.getTag();
		Intent intent = new Intent(TaskActivity.this, CalendarActivity.class);
		intent.putExtra("taskId", task.getId());
		startActivity(intent);
	    }
	};
    }

    public OnClickListener getQuestionIconListener() {
	return new OnClickListener() {
	    @Override
	    public void onClick(View v) {
		Intent intent = new Intent(TaskActivity.this, SplashScreenActivity.class);
		startActivity(intent);
	    }
	};
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
	MenuInflater inflater = getMenuInflater();
	inflater.inflate(R.menu.taskmenu, menu);
	
	logCalendars();
	
	return true;
    }
    
    private void logCalendars() {
	/*String[] projection = new String[] { "_id", "name" };
	Uri calendars = Uri.parse("content://calendar/calendars");
	Cursor managedCursor = managedQuery(calendars, projection, null, null, null);
	Log.d("seinfeld", "Calendars Count: " + managedCursor.getCount());
	
	final int nameColumn = managedCursor.getColumnIndex("name");
	final int idColumn = managedCursor.getColumnIndex("_id");
	
	while (managedCursor.moveToNext()) {
	    String calName = managedCursor.getString(nameColumn);
	    String calId = managedCursor.getString(idColumn);
	    Log.d("seinfeld", "CalendarInfo: " + calName + "..." + calId);
	}
	
	managedCursor.close();*/
	
	// visibility: default (0), confidential (1), private (2), or public (3)
	// transparency: opaque (0) or transparent (1)

	/*ContentValues event = new ContentValues();
	event.put("calendar_id", calId);
	event.put("title", "Event Title");
	event.put("description", "Event Desc");
	event.put("eventLocation", "Event Location");
	event.put("dtstart", "1273791600000");
	event.put("dtend", "1273791600000");
	event.put("eventStatus", 1);
	event.put("visibility", 0);
	event.put("transparency", 0);
	event.put("hasAlarm", 1);

	Uri eventsUri = Uri.parse("content://calendar/events");
	Uri url = getContentResolver().insert(eventsUri, event);*/
    }


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
	switch (item.getItemId()) {
	case R.id.addTask:
	    showDialog(EditTaskView.ADD_TASK);
	    break;
	case R.id.deleteTask:
	    startActivity(new Intent(TaskActivity.this, DeleteTaskListActivity.class));
	    break;
	case R.id.editTask:
	    startActivity(new Intent(TaskActivity.this, EditTaskListActivity.class));
	    break;
	}
	return super.onOptionsItemSelected(item);
    }   
    
    private TaskUpdatedHandler getSaveTaskHandler(final int dialogType) {
	return new TaskUpdatedHandler() {
	    @Override
	    public void onUpdate(Task task) {
		Log.d("seinfeld", "!@# SaveTaskHandler onUpdate....");
		manager.updateTask(task);
		refreshTaskList();
		
		// setReminder(task.getText());
		
		dismissDialog(dialogType);
	    }
	};
    }
    
    private void setReminder(String reminderTitle) {
	Log.d("seinfeld", "!@# Setting reminder....");
	
	Calendar cal = Calendar.getInstance();              
	Intent intent = new Intent(Intent.ACTION_EDIT);
	intent.setType("vnd.android.cursor.item/event");
	// intent.putExtra("beginTime", cal.getTimeInMillis());
	intent.putExtra("beginTime", "1273791600000");
	//intent.putExtra("allDay", false);
	intent.putExtra("rrule", "FREQ=DAILY");
	// intent.putExtra("endTime", cal.getTimeInMillis()+60*60*1000);
	intent.putExtra("endTime", "1273791600000");
	intent.putExtra("title", reminderTitle);
	startActivity(intent);
    }

    @Override
    protected Dialog onCreateDialog(int id) {
	switch (id) {
	case EditTaskView.ADD_TASK:
	    return new EditTaskView(TaskActivity.this);
	}
	return super.onCreateDialog(id);
    }

    @Override
    protected void onPrepareDialog(int id, Dialog dialog) {
	switch (id) {
	case EditTaskView.ADD_TASK:
	    ((EditTaskView) dialog).init(new Task(), id, getSaveTaskHandler(id));
	    break;
	}
	super.onPrepareDialog(id, dialog);
    }

    private void initDBManager() {
	if (manager == null)
	    manager = new DBManager(getApplicationContext());
    }

    @Override
    protected void onDestroy() {
	super.onDestroy();
	manager.close();
    }

}
